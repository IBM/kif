# Copyright (C) 2024-2025 IBM Corp.
# SPDX-License-Identifier: Apache-2.0

from __future__ import annotations

import abc

from ... import itertools
from ...context import Context
from ...model import (
    DatatypeVariable,
    DataValueVariable,
    DeepDataValueVariable,
    EntityVariable,
    ExternalIdVariable,
    IRI_Variable,
    ItemVariable,
    LexemeVariable,
    PropertyVariable,
    QualifierRecordVariable,
    QuantityVariable,
    RankVariable,
    ReferenceRecordSetVariable,
    ShallowDataValueVariable,
    StringVariable,
    TextVariable,
    TimeVariable,
    Variable,
)
from ...typing import cast, Final, Iterator, Sequence
from ..compiler import Compiler
from .builder import SelectQuery
from .options import SPARQL_CompilerOptions as Options


class SPARQL_Compiler(Compiler):
    """Abstract base class for SPARQL compilers."""

    class Query(SelectQuery):
        """The type of queries generated by the SPARQL compiler."""

    __slots__ = (
        '_debug',
        '_omega',
        '_query_dummy',
        '_query_stack',
    )

    #: Whether to enable debugging.
    _debug: bool

    #: Maximum number of disjoint queries generate.
    _omega: int

    #: Dummy auery used for generating fresh variables.
    _query_dummy: SPARQL_Compiler.Query

    #: The generated disjoint queries.
    _query_stack: Sequence[SPARQL_Compiler.Query]

    @abc.abstractmethod
    def __init__(
            self,
            debug: bool | None = None,
            omega: int | None = None,
            context: Context | None = None
    ) -> None:
        self._debug = bool(debug or False)
        self._omega = max(int(omega), 1) if omega is not None else 1
        self._query_dummy = self.Query()
        self._query_stack = []

    @property
    def default_options(self) -> Options:
        """The default options of compiler."""
        return self.get_default_options()

    def get_default_options(self, context: Context | None = None) -> Options:
        """Gets the default options of compiler.

        Parameters:
           context: Context.

        Returns:
           Compiler options.
        """
        return self.get_context(context).options.compiler.sparql

    @property
    def debug(self) -> bool:
        """Whether debugging is enabled."""
        return self.get_debug()

    def get_debug(self) -> bool:
        """Gets the debug flag.

        Returns:
           Debug flag.
        """
        return self._debug

    @property
    def omega(self) -> int:
        """The maximum number of disjoint queries to generate."""
        return self.get_omega()

    def get_omega(self) -> int:
        """Gets the maximum number of disjoint queries to generate.

        Returns:
           Maximum number of disjoint queries.
        """
        return self._omega

    @property
    def query_stack(self) -> Sequence[Query]:
        """The compiled query stack."""
        return self.get_query_stack()

    def get_query_stack(self) -> Sequence[Query]:
        """Get the compiled query stack.

        Returns:
           Query stack.
        """
        return self._query_stack

    def push_query(self, query: Query | None = None) -> Query:
        """Pushes query onto query stack.

        If `query` is ``None``, pushes an empty query.

        Returns:
           The pushed query.
        """
        query = query or self.Query()
        cast(list, self._query_stack).append(query)
        return query

    def pop_query(self) -> Query:
        """Pops query from query stack.

        Returns:
           The popped query.
        """
        assert self._query_stack
        return cast(list, self._query_stack).pop()

    @property
    def q(self) -> Query:
        """The current query (top of query stack)."""
        return self.get_query()

    @property
    def query(self) -> Query:
        """The current query (top of query stack)."""
        return self.get_query()

    def get_query(self) -> Query:
        """Gets the current query (top of query stack).

        Returns:
           Query.
        """
        assert self._query_stack
        return self._query_stack[-1]

    @classmethod
    def uri(cls, content: Query.T_URI) -> Query.URI:
        """Alias of :meth:`Query.uri`."""
        return cls.Query.uri(content)

    @classmethod
    def bnode(cls) -> Query.BNode:
        """Alias of :meth:`Query.bnode`."""
        return cls.Query.bnode()

    @classmethod
    def literal(
            cls,
            content: Query.TLiteral,
            language: str | None = None,
            datatype: str | None = None
    ) -> Query.Literal:
        """Alias of :meth:`Query.literal`."""
        return cls.Query.literal(content, language, datatype)

    @classmethod
    def qvar(cls, name: Query.TVariable) -> Query.Variable:
        """Alias of :meth:`Query.var`."""
        return cls.Query.var(name)

    @classmethod
    def qvars(
            cls,
            var: Query.TVariable,
            *vars: Query.Variable
    ) -> Iterator[Query.Variable]:
        """Alias of :meth:`Query.vars`."""
        return cls.Query.vars(var, *vars)

    @classmethod
    def as_qvar(cls, var: Variable) -> Query.Variable:
        """Constructs query variable from variable.

        Parameter:
           var: Variable.

        Returns:
           Query variable.
        """
        return cls.qvar(var.name)

    @classmethod
    def as_qvars(
            cls,
            var: Variable,
            *vars: Variable
    ) -> Iterator[Query.Variable]:
        """Constructs one or more query variables from variables.

        Parameters:
           var: Variable.
           vars: Variables.

        Returns:
           Iterator of query variables.
        """
        return map(cls.as_qvar, itertools.chain((var,), vars))

    #: Classes of variables corresponding to primitive SPARQL types.
    _primitive_var_classes: Final[tuple[type[Variable], ...]] = (
        DatatypeVariable,
        IRI_Variable,
        QuantityVariable,
        StringVariable,
        TimeVariable,
    )

    @classmethod
    def as_safe_qvar(cls, var: Variable) -> Query.Variable:
        """Constructs query variable from variable (safe).

        If variable is not of a primitive type, raises an error.

        Returns:
           Query variable.
        """
        if isinstance(var, cls._primitive_var_classes):
            return cls.as_qvar(var)
        else:
            raise TypeError(f'variable {var} is not of a primitive type')

    @classmethod
    def as_safe_qvars(
            cls,
            var: Variable,
            *vars: Variable
    ) -> Iterator[Query.Variable]:
        """Constructs one or more query variables from variables (safe).

        If one of the variables is not of a primitive type, raises an error.

        Parameters:
           var: Variable.
           vars: Variables.

        Returns:
           Iterator of query variables.
        """
        return map(cls.as_safe_qvar, itertools.chain((var,), vars))

    def fresh_qvar(self) -> Query.Variable:
        """Constructs a fresh query variable.

        Returns:
           Query variable.
        """
        return self._query_dummy.fresh_var()

    def fresh_qvars(
            self,
            n: int
    ) -> Iterator[Query.Variable]:
        """Constructs one or more fresh query variables.

        Returns:
           Iterator of variables.
        """
        return (self.fresh_qvar() for _ in range(n))

    def fresh_var(self, variable_class: type[Variable]) -> Variable:
        """Constructs a fresh variable of the given class.

        Parameters:
           variable_class: Variable class.

        Returns:
           Variable.
        """
        return variable_class(str(self._query_dummy.fresh_var()))

    def fresh_vars(
            self,
            variable_class: type[Variable],
            n: int
    ) -> Iterator[Variable]:
        """Constructs one or more fresh variables of the given class.

        Parameters:
           variable_class: Variable class.

        Returns:
           Iterator of variables.
        """
        return (self.fresh_var(variable_class) for _ in range(n))

    def fresh_entity_var(self) -> EntityVariable:
        """Constructs a fresh entity variable.

        Returns:
           Entity variable.
        """
        return cast(EntityVariable, self.fresh_var(EntityVariable))

    def fresh_item_var(self) -> ItemVariable:
        """Constructs a fresh item variable.

        Returns:
           Item variable.
        """
        return cast(ItemVariable, self.fresh_var(ItemVariable))

    def fresh_property_var(self) -> PropertyVariable:
        """Constructs a fresh property variable.

        Returns:
           Property variable.
        """
        return cast(PropertyVariable, self.fresh_var(PropertyVariable))

    def fresh_lexeme_var(self) -> LexemeVariable:
        """Constructs a fresh lexeme variable.

        Returns:
           Lexeme variable.
        """
        return cast(LexemeVariable, self.fresh_var(LexemeVariable))

    def fresh_data_value_var(self) -> DataValueVariable:
        """Constructs a fresh data-value variable.

        Returns:
           Data-value variable.
        """
        return cast(DataValueVariable, self.fresh_var(DataValueVariable))

    def fresh_shallow_data_value_var(self) -> ShallowDataValueVariable:
        """Constructs a fresh shallow data-value variable.

        Returns:
           Shallow data-value variable.
        """
        return cast(ShallowDataValueVariable, self.fresh_var(
            ShallowDataValueVariable))

    def fresh_iri_var(self) -> IRI_Variable:
        """Constructs a fresh IRI variable.

        Returns:
           IRI variable.
        """
        return cast(IRI_Variable, self.fresh_var(IRI_Variable))

    def fresh_text_var(self) -> TextVariable:
        """Constructs a fresh text variable.

        Returns:
           Text variable.
        """
        return cast(TextVariable, self.fresh_var(TextVariable))

    def fresh_string_var(self) -> StringVariable:
        """Constructs a fresh string variable.

        Returns:
           String variable.
        """
        return cast(StringVariable, self.fresh_var(StringVariable))

    def fresh_external_id_var(self) -> ExternalIdVariable:
        """Constructs a fresh external-id variable.

        Returns:
           External id variable.
        """
        return cast(ExternalIdVariable, self.fresh_var(ExternalIdVariable))

    def fresh_deep_data_value_var(self) -> DeepDataValueVariable:
        """Constructs a fresh deep data-value variable.

        Returns:
           Deep data-value variable.
        """
        return cast(DeepDataValueVariable, self.fresh_var(
            DeepDataValueVariable))

    def fresh_quantity_var(self) -> QuantityVariable:
        """Constructs a fresh quantity variable.

        Returns:
           Quantity variable.
        """
        return cast(QuantityVariable, self.fresh_var(QuantityVariable))

    def fresh_time_var(self) -> TimeVariable:
        """Constructs a fresh time variable.

        Returns:
           Time variable.
        """
        return cast(TimeVariable, self.fresh_var(TimeVariable))

    def fresh_qualifier_record_var(self) -> QualifierRecordVariable:
        """Constructs a fresh qualifier record variable.

        Returns:
           Qualifier record variable.
        """
        return cast(QualifierRecordVariable, self.fresh_var(
            QualifierRecordVariable))

    def fresh_reference_record_set_var(self) -> ReferenceRecordSetVariable:
        """Constructs a fresh reference record set variable.

        Returns:
           Reference record set variable.
        """
        return cast(ReferenceRecordSetVariable, self.fresh_var(
            ReferenceRecordSetVariable))

    def fresh_rank_var(self) -> RankVariable:
        """Constructs a fresh rank variable.

        Returns:
           Rank variable.
        """
        return cast(RankVariable, self.fresh_var(RankVariable))
